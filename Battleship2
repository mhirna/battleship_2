import random
import os
import time


class Ship:

    def __init__(self, length=0, bow=(0, 0), horizontal=True):
        '''
        Define parameters for class Ship.
        :param length: length of a ship situated in a coord, if none - 0
        :param bow: top-left coordinate
        :param horizontal: True if horizontal
        '''
        self.__length = length
        self.__hit = [False] * length
        self.bow = bow
        self.horizontal = horizontal

    def shoot_at(self, coords):
        '''
        Checks if the ship was hit.
        :param coords: hit coord
        :return: True if ship is in that coordinate
        '''
        move = 0
        if self.horizontal:
            move = 1
        if len(self.__hit) > 0:
            self.__hit[coords[1 - move] - self.bow[move]] = True
            return True
        else:
            return False

    def is_destroyed(self):
        '''
        Check if ship is destroyed.
        :return: True if the whole ship is destroyed
        '''
        if False not in self.__hit and self.__length > 0:
            return True
        else:
            return False

    def get_length(self):
        '''
        Get private parameter length
        :return: int
        '''
        return self.__length

    def get_hit(self):
        '''
        Get list of bool for a boat, that indicates if coord is hit.
        :return: list
        '''
        return self.__hit


class Field:
    def __init__(self):
        '''
        Create a field object using field_generator
        '''
        self.__ships = Field.field_generator()
        self.shot = []

    def get_ships(self):
        '''
        Get field full of objects
        :return: list of lists of objects Ship
        '''
        return self.__ships

    @staticmethod
    def space_around(coords, lst):
        '''
        Remove all the coordinates that surround a ship.
        :param coords: list of available coordinates (not with ships or around it)
        :param lst: list of coordinates of a ship created
        :return: list of available coordinates
        '''
        for i in range(len(lst)):
            for x in range(-1, 2):
                for y in range(-1, 2):
                    if (lst[i][0] + x, lst[i][1] + y) in coords:
                        coords.remove((lst[i][0] + x, lst[i][1] + y))
        return coords

    @staticmethod
    def field_generator():
        '''
        Generate a random field of ships.
        :return: string
        '''
        coords = []
        for i in range(1, 11):
            for j in range(1, 11):
                coords.append((i, j))
        field = [[Ship() for i in range(10)] for i in range(10)]
        ships = [4 - i for i in range(4) for j in range(i + 1)]
        iterat = 0
        while iterat < 10:
            coord = random.choice(coords)
            ship = random.choice([(1, ships[iterat]), (ships[iterat], 1)])
            if ship[0] == 1:
                horizontal = True
            else:
                horizontal = False
            ship_coords = []
            check_coord = False
            for height in range(ship[0]):
                for length in range(ship[1]):
                    if (coord[0] + height, coord[1] + length) not in coords:
                        check_coord = True
            if check_coord:
                continue
            for height in range(ship[0]):
                for length in range(ship[1]):
                    ship_coords.append((coord[0] + height, coord[1] + length))
            sh = Ship(length=len(ship_coords), bow=ship_coords[0], horizontal=horizontal)
            for i in range(len(ship_coords)):
                field[ship_coords[i][1] - 1][ship_coords[i][0] - 1] = sh
                coords.remove(ship_coords[i])
            iterat += 1
            coords = Field.space_around(coords, ship_coords)
        return field

    def shoot_at(self, coords):
        '''
        Append shot coordinates to a list and return True if there is a boat in a coord.
        :param coords: tuple(int, int)
        :return: bool
        '''
        self.shot.append(coords)
        return self.__ships[coords[0] - 1][coords[1] - 1].shoot_at(coords)

    def field_with_ships(self):
        '''
        Return a field with ships
        :return: string
        '''
        field_str = [str(i) + " " * (2 - len(str(i))) for i in range(1, 11)]
        for y in range(10):
            for x in range(10):
                if self.__ships[y][x].get_length() == 0:
                    field_str[y] += "  "
                elif (y + 1, x + 1) in self.shot:
                    field_str[y] += " X"
                elif self.__ships[y][x].get_length() > 0:
                    field_str[y] += " *"
        field_str.insert(0, "   A B C D E F G H I J")
        return "\n".join(field_str)

    def field_without_ships(self):
        '''
        Return a field without ships
        :return: string
        '''
        field_str = [str(i) + " " * (2 - len(str(i))) for i in range(1, 11)]
        for y in range(10):
            for x in range(10):
                if (y + 1, x + 1) in self.shot and self.__ships[y][x].get_length() == 0:
                    field_str[y] += " 0"
                elif (y + 1, x + 1) in self.shot and self.__ships[y][x].get_length() > 0:
                    field_str[y] += " X"
                else:
                    field_str[y] += "  "
        field_str.insert(0, "   A B C D E F G H I J")
        return "\n".join(field_str)


class Player:

    def __init__(self, name):
        '''
        Define name of a player
        :param name: name of a player
        '''
        self.name = name

    def read_position(self):
        '''
        Read a coordinate a player is shooting at.
        :return: tuple(int, int)
        '''
        greet = input(self.name + " enter move: ")
        invalid_arg = ValueError
        try:
            coord = (int(greet[1:]), ord(greet[0].upper()) - 64)
            if coord[0] not in range(11) or coord[1] not in range(11):
                raise invalid_arg
        except ValueError:
                print("Wrong argument. Try again.")
                return (0, 0)
        return coord


class Game:
    def __init__(self):
        '''
        Define fields and names for 2 players.
        '''
        self.player1 = input("Hey, bro! Enter your name:  ")
        self.player2 = input("Hey, another bro! Enter your name:  ")
        self.__field = [Field(), Field()]
        self.__players = [Player(self.player1), Player(self.player2)]
        self.__ships_left = [10, 10]

    def field_without_ships(self, index):
        '''
        Return a field without ships for a player with index
        :param index: integer
        :return: string
        '''
        return self.__field[index].field_without_ships()

    def field_with_ships(self, index):
        '''
        Return a field with ships for a player with index
        :param index: integer
        :return: string
        '''
        return self.__field[index].field_with_ships()

    def hide_field(self):
        '''
        Hide a field of another player by clearing screen
        :return: None
        '''
        i = input('Press ENTER')
        os.system('cls')
        print('Give computer to another player if missed.\n\n')
        time.sleep(4)
        os.system('cls')
        print('\n')

    def play_finally(self):
        '''
        The main method that calls all the others and prints.
        :return: None
        '''
        current_player = 0
        print(self.player2, ", don't look at the screen!")
        inp = input('Press ENTER')
        while self.__ships_left[current_player] != 0:
            print(self.field_with_ships(current_player))
            print(self.field_without_ships(1 - current_player))
            coord_hit = self.__players[current_player].read_position()
            if coord_hit == (0, 0):
                coord_hit = self.__players[current_player].read_position()
            x = coord_hit[0]
            y = coord_hit[1]
            if self.__field[1 - current_player].shoot_at(coord_hit):
                if self.__field[1 - current_player].get_ships()[x - 1][y - 1].is_destroyed():
                    print('Hey, you got that ship, bro')
                    self.__ships_left[current_player] -= 1
                else:
                    print('Hey, good shooting, bro. Shoot more.')
            else:
                print("You loser ain't my bro, try again later. ")
                current_player = 1 - current_player
            self.hide_field()
        print('\n\nDUDE YOU WON! CONGRATS! YOU WANNA CELEBRATE?')

game1 = Game()
game1.play_finally()
